<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>CS-Notes</title>
      <link>https://notes.yxy.ninja</link>
      <description>Last 10 notes on CS-Notes</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>2&#039;s Complement</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Number-System/Binary-Encoding/2's-Complement</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Number-System/Binary-Encoding/2's-Complement</guid>
    <description>Abstract § We are adding extra 1 to the 反码 to obtain 补码 This makes sure that there is only one 0 by adding 1 to after converting from Sign-and-Magnitude to 1’s Complement .</description>
    <pubDate>Tue, 05 Dec 2023 10:09:15 GMT</pubDate>
  </item><item>
    <title>1&#039;s Complement</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Number-System/Binary-Encoding/1's-Complement</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Number-System/Binary-Encoding/1's-Complement</guid>
    <description>Abstract § For negative number, all bits are inverted except the sign bit which is 1 when we need to perform the computation We can use this in addition computation directly, without building extra logic circuit We will have +0 &amp; -0, can be solved by 2’s Complement .</description>
    <pubDate>Tue, 05 Dec 2023 10:06:49 GMT</pubDate>
  </item><item>
    <title>Decimal to Binary</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Number-System/Binary-Encoding/Decimal-to-Binary</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Number-System/Binary-Encoding/Decimal-to-Binary</guid>
    <description>Abstract § Number before decimal point Keep diving by 2 until we get 0 Then the binary form counts from bottom to top Number after decimal point Keep multiple by 2 until we get 1 or infinite loop Then the binary form counts from top to bottom .</description>
    <pubDate>Tue, 05 Dec 2023 10:01:52 GMT</pubDate>
  </item><item>
    <title>Pipeline</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Pipeline</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Pipeline</guid>
    <description>Abstract § Reduce idle time when executing the Pipeline Stages by using Instruction-Level Parallelism Terminologies § Width § The Instruction-Level Parallelism capabilities - how many Instruction can be run in parallel in the same time References § CPU Pipelining - The cool way your CPU avoids idle time! .</description>
    <pubDate>Tue, 05 Dec 2023 09:55:25 GMT</pubDate>
  </item><item>
    <title>Instruction Set Architecture (ISA)</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/Instruction-Set-Architecture-(ISA)</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/Instruction-Set-Architecture-(ISA)</guid>
    <description>#computer_organisation Abstract § A set of instructions which contains Instruction &amp; parameters Aka the language the CPU speaks Benefit § Implementation of CPU is decoupled.</description>
    <pubDate>Tue, 05 Dec 2023 09:54:57 GMT</pubDate>
  </item><item>
    <title>Branching</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Branching/Branching</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Branching/Branching</guid>
    <description>Abstract § Instead executing Instruction one by one in sequence. With loops like for-loop &amp; while-loop. We will jump from one Instruction back to previous Instruction that is many Instruction away Example Cons § Potential hit on performance § When we need to branch back to the destination, this will lead to Pipeline Flush Terminologies §.</description>
    <pubDate>Tue, 05 Dec 2023 09:53:55 GMT</pubDate>
  </item><item>
    <title>Multi-threaded Chips</title>
    <link>https://notes.yxy.ninja/OS/MISC/CPU/multi/Multi-threaded-Chips</link>
    <guid>https://notes.yxy.ninja/OS/MISC/CPU/multi/Multi-threaded-Chips</guid>
    <description>#os Abstract § Control unit, Registers &amp; Pipeline are replicated .</description>
    <pubDate>Tue, 05 Dec 2023 09:48:54 GMT</pubDate>
  </item><item>
    <title>Fixed-length Instruction</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/Instruction-Length/Fixed-length-Instruction</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/Instruction-Length/Fixed-length-Instruction</guid>
    <description>Abstract § Easy Fetch &amp; Decode Simplified Pipeline &amp; Instruction-Level Parallelism .</description>
    <pubDate>Tue, 05 Dec 2023 09:48:54 GMT</pubDate>
  </item><item>
    <title>Instruction-Level Parallelism</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Instruction-Level-Parallelism</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Instruction-Level-Parallelism</guid>
    <description>Abstract § Allow CPU to start the next Instruction without the current Instruction to finish, since Pipeline Stages are independent of each other on a hardware-level However, certain combinations of Instruction back to back can create Read-After-Write(RAW) Hazard .</description>
    <pubDate>Tue, 05 Dec 2023 09:46:02 GMT</pubDate>
  </item><item>
    <title>Out-of-Order Execution</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Read-After-Write(RAW)-Hazard/Out-of-Order-Execution</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Read-After-Write(RAW)-Hazard/Out-of-Order-Execution</guid>
    <description>Abstract § Used with Operand Forwarding to handle Pipeline Stall Without Out-of-Order Execution The third Instruction has to stop because the second Instruction stops With Out-of-Order Execution By shifting the starting point of Instruction, we can minimize idle time The idea is to execute independent Instruction in between Instruction that are dependent on each other .</description>
    <pubDate>Tue, 05 Dec 2023 09:45:51 GMT</pubDate>
  </item>
    </channel>
  </rss>