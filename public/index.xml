<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>CS-Notes</title>
      <link>https://notes.yxy.ninja</link>
      <description>Last 10 notes on CS-Notes</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>MIPS Instruction</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/MIPS-Instruction</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/MIPS-Instruction</guid>
    <description>Abstract § The Instruction may specify 3 Registers - Destination Register, Source Register &amp; Target Register Terminologies § Destination Register § 5bits Labeled rd, mapped to WR Registers that gets the result of Operation in MIPS R-Type Instruction Instruction Source Register § 5bits Labeled rs, mapped to RR1 Register with value stored that we want to use to carry out Operation Target Register § 5 bits Labeled rt, mapped to RR2 Register with value stored we want to use in MIPS R-Type Instruction Instruction Register that gets the result of Operation in MIPS I-Type Instruction .</description>
    <pubDate>Sat, 09 Dec 2023 15:15:41 GMT</pubDate>
  </item><item>
    <title>GPU</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Terminologies/Processor/GPU</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Terminologies/Processor/GPU</guid>
    <description>Abstract § A Multi-core chips with thousands of tiny cores Benefits § Optimised for Parallel Computing § Allows games to perform a ton of Linear Algebra in parallel § We can calculate pixels in batches or parallel Great for AI related work § Allow training Deep Learning Models that perform tons Matrix Multiplication on dataset Cons § Hard to program § Comparison with CPU § CPU one core is way more power, and able to handle complication logics like Branching.</description>
    <pubDate>Sat, 09 Dec 2023 15:15:41 GMT</pubDate>
  </item><item>
    <title>Dynamic Programming</title>
    <link>https://notes.yxy.ninja/DSA/Algorithms/Dynamic-Programming</link>
    <guid>https://notes.yxy.ninja/DSA/Algorithms/Dynamic-Programming</guid>
    <description>Abstract § 3 key components - Overlapping Subproblems (重复子问题), Optimal Substructure ( 最优子结构) &amp; Statelessness (无后效性) Leetcode Tips § Debugging § Print out DP Table to check any errors Questions § Basics § 509.</description>
    <pubDate>Sat, 09 Dec 2023 15:15:41 GMT</pubDate>
  </item><item>
    <title>Greedy Algorithm</title>
    <link>https://notes.yxy.ninja/DSA/Algorithms/Greedy-Algorithm</link>
    <guid>https://notes.yxy.ninja/DSA/Algorithms/Greedy-Algorithm</guid>
    <description>Abstract § Note 向日葵朝着太阳转动， 时刻都在寻求当前汲取最大养分的可能。 最优子结构就是追随太阳最高效的移动轨迹。 移除重复子问题让向日葵紧跟太阳的脚步。 贪心策略在一轮轮的简单选择中，逐步导向最佳的答案。 Used to solve Optimisation Problem Usually better performance than Backtracking &amp; Dynamic Programming Think about what is the Local Optimal Solution.</description>
    <pubDate>Sat, 09 Dec 2023 15:15:41 GMT</pubDate>
  </item><item>
    <title>MacOs Setup</title>
    <link>https://notes.yxy.ninja/MacOs-Setup</link>
    <guid>https://notes.yxy.ninja/MacOs-Setup</guid>
    <description>Abstract § Note 🌟 denotes tools &amp; settings I must have in MacOS to have a smooth user/developer experience GUI Apps § Install Firefox (Replaced with floorp) 🌟 Install Bypass Paywalls Install Dropbox Install Obsidian 🌟 Install Keypass (Replaced with Install StrongBox from App Store) 🌟 Install VSC 🌟 Add code into cli Install Termius 🌟 Modify Default Shell Install Tutanota 🌟 Install Notion 🌟 Install Docker (Replaced with OrbStack) 🌟 Install Podman Install Node Version Manager, npm included 🌟 Install Postman Install GitKraken 🌟 Install Brave Install MySQL Workbench Install Google Drive Client 🌟 Install Java JDK 🌟 Install IntelliJ Community 🌟 Install VirtualBox Install Ngrok # Move Ngrok Executable to PATH cp ngrok /Users/&lt;USERNAME&gt;/.</description>
    <pubDate>Sat, 09 Dec 2023 15:15:41 GMT</pubDate>
  </item><item>
    <title>4. Try describing 1 object 2 ways</title>
    <link>https://notes.yxy.ninja/Problem-solving/4.-Try-describing-1-object-2-ways</link>
    <guid>https://notes.yxy.ninja/Problem-solving/4.-Try-describing-1-object-2-ways</guid>
    <description>#problem_solving Note Basically explaining something in 2 different perspectives. For example, counting the possible permutation of a string of 5bits.</description>
    <pubDate>Sat, 09 Dec 2023 13:49:35 GMT</pubDate>
  </item><item>
    <title>2. Giving things (meaningful) names</title>
    <link>https://notes.yxy.ninja/Problem-solving/2.-Giving-things-(meaningful)-names</link>
    <guid>https://notes.yxy.ninja/Problem-solving/2.-Giving-things-(meaningful)-names</guid>
    <description>#problem_solving Give names to objects that describes its properties (Or to differentiate each one) It is like forming an abstraction over something, then we have more brain power to build on top of it Example 1: Approaching a problem related to Circle, Inscribed Angle Theorem.</description>
    <pubDate>Sat, 09 Dec 2023 13:48:46 GMT</pubDate>
  </item><item>
    <title>3. Leverage Symmetry</title>
    <link>https://notes.yxy.ninja/Problem-solving/3.-Leverage-Symmetry</link>
    <guid>https://notes.yxy.ninja/Problem-solving/3.-Leverage-Symmetry</guid>
    <description>#problem_solving Note Basically obtaining another piece of information based on reflection/symmetry, basically buy one get one free Example 1: Approaching a problem related to Circle, Inscribed Angle Theorem.</description>
    <pubDate>Sat, 09 Dec 2023 13:48:46 GMT</pubDate>
  </item><item>
    <title>1. Use the defining features of the set-up</title>
    <link>https://notes.yxy.ninja/Problem-solving/1.-Use-the-defining-features-of-the-set-up</link>
    <guid>https://notes.yxy.ninja/Problem-solving/1.-Use-the-defining-features-of-the-set-up</guid>
    <description>#problem_solving Note Look at what is given Ask the definition of each term How the ideas piece up together Example 1: Approaching a problem related to Circle, Inscribed Angle Theorem.</description>
    <pubDate>Sat, 09 Dec 2023 13:48:46 GMT</pubDate>
  </item><item>
    <title>MIPS R-Type Instruction</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/Instructions/R-Type/MIPS-R-Type-Instruction</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/Instructions/R-Type/MIPS-R-Type-Instruction</guid>
    <description>Abstract § Opcode is always 000000 Operation is decided by the Function Code 6 parts - Opcode, Source Register, Target Register, Destination Register, Shift Amount &amp; Function Code Terminologies § Function Code § 6 bits Give MIPS (2^6-1) + 2^6 = 127 instead of 2^6=64 Instruction Dedicated for MIPS R-Type Instruction (if my understanding isn’t wrong) Shift Amount § 5bits Labeled as shamt .</description>
    <pubDate>Sat, 09 Dec 2023 13:46:03 GMT</pubDate>
  </item>
    </channel>
  </rss>