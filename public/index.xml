<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>CS-Notes</title>
      <link>https://notes.yxy.ninja</link>
      <description>Last 10 notes on CS-Notes</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Pipeline</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Pipeline</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Pipeline</guid>
    <description>Abstract § Reduce idle time when executing the Pipeline Stages by using Instruction-Level Parallelism Terminologies § Width § The Instruction-Level Parallelism capabilities - how many Instruction can be run in parallel in the same time References § CPU Pipelining - The cool way your CPU avoids idle time! .</description>
    <pubDate>Tue, 05 Dec 2023 09:55:25 GMT</pubDate>
  </item><item>
    <title>Instruction Set Architecture (ISA)</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/Instruction-Set-Architecture-(ISA)</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/Instruction-Set-Architecture-(ISA)</guid>
    <description>#computer_organisation Abstract § A set of instructions which contains Instruction &amp; parameters Aka the language the CPU speaks Benefit § Implementation of CPU is decoupled.</description>
    <pubDate>Tue, 05 Dec 2023 09:54:57 GMT</pubDate>
  </item><item>
    <title>Branching</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Branching/Branching</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Branching/Branching</guid>
    <description>Abstract § Instead executing Instruction one by one in sequence. With loops like for-loop &amp; while-loop. We will jump from one Instruction back to previous Instruction that is many Instruction away Example Cons § Potential hit on performance § When we need to branch back to the destination, this will lead to Pipeline Flush Terminologies §.</description>
    <pubDate>Tue, 05 Dec 2023 09:53:55 GMT</pubDate>
  </item><item>
    <title>Multi-threaded Chips</title>
    <link>https://notes.yxy.ninja/OS/MISC/CPU/multi/Multi-threaded-Chips</link>
    <guid>https://notes.yxy.ninja/OS/MISC/CPU/multi/Multi-threaded-Chips</guid>
    <description>#os Abstract § Control unit, Registers &amp; Pipeline are replicated .</description>
    <pubDate>Tue, 05 Dec 2023 09:48:54 GMT</pubDate>
  </item><item>
    <title>Fixed-length Instruction</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/Instruction-Length/Fixed-length-Instruction</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/Instruction-Length/Fixed-length-Instruction</guid>
    <description>Abstract § Easy Fetch &amp; Decode Simplified Pipeline &amp; Instruction-Level Parallelism .</description>
    <pubDate>Tue, 05 Dec 2023 09:48:54 GMT</pubDate>
  </item><item>
    <title>Instruction-Level Parallelism</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Instruction-Level-Parallelism</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Instruction-Level-Parallelism</guid>
    <description>Abstract § Allow CPU to start the next Instruction without the current Instruction to finish, since Pipeline Stages are independent of each other on a hardware-level However, certain combinations of Instruction back to back can create Read-After-Write(RAW) Hazard .</description>
    <pubDate>Tue, 05 Dec 2023 09:46:02 GMT</pubDate>
  </item><item>
    <title>Out-of-Order Execution</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Read-After-Write(RAW)-Hazard/Out-of-Order-Execution</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Read-After-Write(RAW)-Hazard/Out-of-Order-Execution</guid>
    <description>Abstract § Used with Operand Forwarding to handle Pipeline Stall Without Out-of-Order Execution The third Instruction has to stop because the second Instruction stops With Out-of-Order Execution By shifting the starting point of Instruction, we can minimize idle time The idea is to execute independent Instruction in between Instruction that are dependent on each other .</description>
    <pubDate>Tue, 05 Dec 2023 09:45:51 GMT</pubDate>
  </item><item>
    <title>Pipeline Stall</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Read-After-Write(RAW)-Hazard/Pipeline-Stall</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Read-After-Write(RAW)-Hazard/Pipeline-Stall</guid>
    <description>Abstract § Pause the instruction before the previous Instruction has Write Back the data it needs Cons § Performance hit § Too much stall in the Pipeline will reduce the benefits of Pipeline When one Instruction stalls, the other Instruction running will have to stall too We can minimize such situation by using Out-of-Order Execution .</description>
    <pubDate>Tue, 05 Dec 2023 09:42:40 GMT</pubDate>
  </item><item>
    <title>Operand Forwarding</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Read-After-Write(RAW)-Hazard/Operand-Forwarding</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Read-After-Write(RAW)-Hazard/Operand-Forwarding</guid>
    <description>Abstract § A tunnel that connects one Pipeline Stages of Instruction to another Pipeline Stages of another Instruction As shown in the diagram above, we are able to save the idle time caused by the Write Back of the first Instruction .</description>
    <pubDate>Tue, 05 Dec 2023 09:41:33 GMT</pubDate>
  </item><item>
    <title>Read-After-Write(RAW) Hazard</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Read-After-Write(RAW)-Hazard/Read-After-Write(RAW)-Hazard</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Pipelining/Read-After-Write(RAW)-Hazard/Read-After-Write(RAW)-Hazard</guid>
    <description>Abstract § x is only ready at t=5 since there’s where the first Instruction finishes Can be countered with simple Pipeline Stall or more complex Operand Forwarding .</description>
    <pubDate>Tue, 05 Dec 2023 09:36:34 GMT</pubDate>
  </item>
    </channel>
  </rss>