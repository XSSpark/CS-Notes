<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>CS-Notes</title>
      <link>https://notes.yxy.ninja</link>
      <description>Last 10 notes on CS-Notes</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Predicate</title>
    <link>https://notes.yxy.ninja/Math/Discrete-Math/Predicate</link>
    <guid>https://notes.yxy.ninja/Math/Discrete-Math/Predicate</guid>
    <description>Abstract § Also known as Propositional Functions &amp; Open Sentences Example: let P stand for is a student at NUS, then P(x) = x is a student at NUS, where x is the Variable, P is the Symbol Truth value depends on Variable Becomes a Mathematical Statement when specific values are substituted for Variable Returns either true or false, thus cant be used as a Variable that is substituted into Symbol like P() Made of Symbol &amp; finite number of Variable Terminologies § Variable § Holds value that determines if Predicate is true or false It doesn&#039;t hold the value of true or false! Only Mathematical Statement can be true or false Symbol § Represents a property or relation Quantifiers § Instead of manually assign a specific value to Variable to obtain a Mathematical Statement Quantifiers is another way, specific how many of a particular type of values that make the predicate true ∀ ∃ Order of Quantifiers § Unless the Quantifiers are of the same type.</description>
    <pubDate>Sat, 09 Dec 2023 16:41:46 GMT</pubDate>
  </item><item>
    <title>Mathematical Statement</title>
    <link>https://notes.yxy.ninja/Math/Discrete-Math/Mathematical-Statement</link>
    <guid>https://notes.yxy.ninja/Math/Discrete-Math/Mathematical-Statement</guid>
    <description>Abstract § Also known as Proposition 3 important types are Universal, Conditional &amp; Existential We can form statements that are Universal &amp; Conditional, or more to form complex statements Either True or False Warning Doesn’t depend on any Variable, unless it is Logical Equivalence equation Not in a question form Different Types of Statements § Universal § Made of Symbol, Variable &amp; Quantifiers ∀x∈D,Q(x) true iff Q(x) is true for every x in D false iff Q(x) is false for at least one x in D For simple ones, usually universal comes with Conditional Statement Existential § Made of Symbol, Variable &amp; Quantifiers ∃x∈D,Q(x) true iff Q(x) is true for at least one x in D false iff Q(x) is false for all x in D For simple ones, usually existential comes with Conjunction Negation of Universal § Logical Equivalence to Existential There is AT LEAST ONE that IS NOT ¬(∀x∈D,Q(x))≡∃x∈D,¬Q(x) Negation of Existential § Logical Equivalence to Universal ALL ARE NOT ¬(∃x∈D,Q(x))≡∀x∈D,¬Q(x) Negation of Universal Conditional § Make use of Negation of Universal &amp; Implication Law Universal Conditional § Made of Symbol, Variable &amp; Quantifiers &amp; Conditional Statement ∀x(ifP(x)→Q(x)) Can be simplified to Universal ∀x∈P,Q(x) Conditional § Conditional Statement If…, then… Terminologies § Statement § A sentence that is True or False, but not both Can be presented with variables like p, q, r &amp; s etc Logical Connectives § Negation: NOT performed first Disjunction: OR ,Conjunction: AND coequal, make sure proper parentheses is used to avoid Ambiguous If-then/implies: performed last, coequal with iff Statement/Propositional Form § Make up with Statement variables &amp; Logical Connectives Compound Statement § Make up with Statement variables &amp; Logical Connectives When the statement has Conditional Statement, convert it using Implication Law to make it much less confusing Tautology t § Statement/Propositional Form that is always true Contradiction c § Statement/Propositional Form that is always false Implicitly Quantified § The Quantifiers are assumed without specified explicitly Vacuous Truth of Universal § Given the statement: All balls in the bowl are blue, however no balls in the bowl.</description>
    <pubDate>Sat, 09 Dec 2023 16:34:28 GMT</pubDate>
  </item><item>
    <title>Second Brain for CS</title>
    <link>https://notes.yxy.ninja//</link>
    <guid>https://notes.yxy.ninja//</guid>
    <description>Navigation § Homepage is still under development. You can navigate around the notes using the explorer on the left side or visit the list of tags that categories the notes.</description>
    <pubDate>Sat, 09 Dec 2023 15:30:02 GMT</pubDate>
  </item><item>
    <title>MIPS R-Type Instruction</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/Instructions/R-Type/MIPS-R-Type-Instruction</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/Instructions/R-Type/MIPS-R-Type-Instruction</guid>
    <description>Abstract § Opcode is always 000000 Operation is decided by the Function Code 6 parts - Opcode, Source Register, Target Register, Destination Register, Shift Amount &amp; Function Code Terminologies § Function Code § 6 bits Give MIPS (2^6-1) + 2^6 = 127 instead of 2^6=64 Instruction Dedicated for MIPS R-Type Instruction (if my understanding isn’t wrong) Shift Amount § 5bits Labeled as shamt .</description>
    <pubDate>Sat, 09 Dec 2023 15:25:46 GMT</pubDate>
  </item><item>
    <title>MIPS Instruction</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/MIPS-Instruction</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/MIPS-Instruction</guid>
    <description>Abstract § The Instruction may specify 3 Registers - Destination Register, Source Register &amp; Target Register Terminologies § Destination Register § 5bits Labeled rd, mapped to WR Registers that gets the result of Operation in MIPS R-Type Instruction Instruction Source Register § 5bits Labeled rs, mapped to RR1 Register with value stored that we want to use to carry out Operation Target Register § 5 bits Labeled rt, mapped to RR2 Register with value stored we want to use in MIPS R-Type Instruction Register that gets the result of Operation in MIPS I-Type Instruction .</description>
    <pubDate>Sat, 09 Dec 2023 15:25:39 GMT</pubDate>
  </item><item>
    <title>GPU</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Terminologies/Processor/GPU</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Terminologies/Processor/GPU</guid>
    <description>Abstract § A Multi-core chips with thousands of tiny cores Benefits § Optimised for Parallel Computing § Allows games to perform a ton of Linear Algebra in parallel § We can calculate pixels in batches or parallel Great for AI related work § Allow training Deep Learning Models that perform tons Matrix Multiplication on dataset Cons § Hard to program § Comparison with CPU § CPU one core is way more power, and able to handle complication logics like Branching.</description>
    <pubDate>Sat, 09 Dec 2023 15:15:41 GMT</pubDate>
  </item><item>
    <title>Dynamic Programming</title>
    <link>https://notes.yxy.ninja/DSA/Algorithms/Dynamic-Programming</link>
    <guid>https://notes.yxy.ninja/DSA/Algorithms/Dynamic-Programming</guid>
    <description>Abstract § 3 key components - Overlapping Subproblems (重复子问题), Optimal Substructure ( 最优子结构) &amp; Statelessness (无后效性) Leetcode Tips § Debugging § Print out DP Table to check any errors Questions § Basics § 509.</description>
    <pubDate>Sat, 09 Dec 2023 15:15:41 GMT</pubDate>
  </item><item>
    <title>Greedy Algorithm</title>
    <link>https://notes.yxy.ninja/DSA/Algorithms/Greedy-Algorithm</link>
    <guid>https://notes.yxy.ninja/DSA/Algorithms/Greedy-Algorithm</guid>
    <description>Abstract § Note 向日葵朝着太阳转动， 时刻都在寻求当前汲取最大养分的可能。 最优子结构就是追随太阳最高效的移动轨迹。 移除重复子问题让向日葵紧跟太阳的脚步。 贪心策略在一轮轮的简单选择中，逐步导向最佳的答案。 Used to solve Optimisation Problem Usually better performance than Backtracking &amp; Dynamic Programming Think about what is the Local Optimal Solution.</description>
    <pubDate>Sat, 09 Dec 2023 15:15:41 GMT</pubDate>
  </item><item>
    <title>MacOs Setup</title>
    <link>https://notes.yxy.ninja/MacOs-Setup</link>
    <guid>https://notes.yxy.ninja/MacOs-Setup</guid>
    <description>Abstract § Note 🌟 denotes tools &amp; settings I must have in MacOS to have a smooth user/developer experience GUI Apps § Install Firefox (Replaced with floorp) 🌟 Install Bypass Paywalls Install Dropbox Install Obsidian 🌟 Install Keypass (Replaced with Install StrongBox from App Store) 🌟 Install VSC 🌟 Add code into cli Install Termius 🌟 Modify Default Shell Install Tutanota 🌟 Install Notion 🌟 Install Docker (Replaced with OrbStack) 🌟 Install Podman Install Node Version Manager, npm included 🌟 Install Postman Install GitKraken 🌟 Install Brave Install MySQL Workbench Install Google Drive Client 🌟 Install Java JDK 🌟 Install IntelliJ Community 🌟 Install VirtualBox Install Ngrok # Move Ngrok Executable to PATH cp ngrok /Users/&lt;USERNAME&gt;/.</description>
    <pubDate>Sat, 09 Dec 2023 15:15:41 GMT</pubDate>
  </item><item>
    <title>4. Try describing 1 object 2 ways</title>
    <link>https://notes.yxy.ninja/Problem-solving/4.-Try-describing-1-object-2-ways</link>
    <guid>https://notes.yxy.ninja/Problem-solving/4.-Try-describing-1-object-2-ways</guid>
    <description>#problem_solving Note Basically explaining something in 2 different perspectives. For example, counting the possible permutation of a string of 5bits.</description>
    <pubDate>Sat, 09 Dec 2023 13:49:35 GMT</pubDate>
  </item>
    </channel>
  </rss>