<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>CS-Notes</title>
      <link>https://notes.yxy.ninja</link>
      <description>Last 10 notes on CS-Notes</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Docker Build</title>
    <link>https://notes.yxy.ninja/Tools/Docker/Docker-Build</link>
    <guid>https://notes.yxy.ninja/Tools/Docker/Docker-Build</guid>
    <description>Abstract Â§ Convert Dockerfile to Docker Container Cautions Â§ --build-arg Â§ Used to pass dynamic values to Engine for the building process Not Environment Variable, that is set with [[Dockerfile#env|ENV]] Frontend Build Â§ Needs the Environment Variable at the container build stage only, not when the container is running .</description>
    <pubDate>Sun, 10 Dec 2023 11:55:18 GMT</pubDate>
  </item><item>
    <title>Dockerfile</title>
    <link>https://notes.yxy.ninja/Tools/Docker/3-Components/Dockerfile/Dockerfile</link>
    <guid>https://notes.yxy.ninja/Tools/Docker/3-Components/Dockerfile/Dockerfile</guid>
    <description>Abstract Â§ Set of steps for Docker to build Docker Container Keywords Â§ ENV Â§ Set the Environment Variable in the Docker Container .</description>
    <pubDate>Sun, 10 Dec 2023 11:54:36 GMT</pubDate>
  </item><item>
    <title>Configuration File, Vault</title>
    <link>https://notes.yxy.ninja/Tools/HashiCorp-Vault/Main-Components/Configuration-File,-Vault</link>
    <guid>https://notes.yxy.ninja/Tools/HashiCorp-Vault/Main-Components/Configuration-File,-Vault</guid>
    <description>#vault Config file for HashiCorp Vault. Contains different keywords to tune the behaviour of the vault like what storage backend to use &amp; how to unseal the vault etc Some of the config can be done using the specific Environment Variable Can be written in either JSON or HCL Some networking related setting can be set dynamically using go-sockaddr template TCP Listener Example [cluster_address,api_addr] Example Example Production Configuration File seal Â§ # Below is using AWS KMS for [[Auto Unseal]] seal &quot;awskms&quot; { region = &quot;ap-southeast-1&quot; kms_key_id = &quot;5b2b78c8-c4db-43d9-ba6b-73295f2ec154&quot; } Example vault.</description>
    <pubDate>Sun, 10 Dec 2023 11:48:16 GMT</pubDate>
  </item><item>
    <title>MacOs Setup</title>
    <link>https://notes.yxy.ninja/MacOs-Setup</link>
    <guid>https://notes.yxy.ninja/MacOs-Setup</guid>
    <description>Abstract Â§ Note ðŸŒŸ denotes tools &amp; settings I must have in MacOS to have a smooth user/developer experience GUI Apps Â§ Install Firefox (Replaced with floorp) ðŸŒŸ Install Bypass Paywalls Install Dropbox Install Obsidian ðŸŒŸ Install Keypass (Replaced with Install StrongBox from App Store) ðŸŒŸ Install VSC ðŸŒŸ Add code into cli Install Termius ðŸŒŸ Modify Default Shell Install Tutanota ðŸŒŸ Install Notion ðŸŒŸ Install Docker (Replaced with OrbStack) ðŸŒŸ Install Podman Install Node Version Manager, npm included ðŸŒŸ Install Postman Install GitKraken ðŸŒŸ Install Brave Install MySQL Workbench Install Google Drive Client ðŸŒŸ Install Java JDK ðŸŒŸ Install IntelliJ Community ðŸŒŸ Install VirtualBox Install Ngrok # Move Ngrok Executable to PATH cp ngrok /Users/&lt;USERNAME&gt;/.</description>
    <pubDate>Sun, 10 Dec 2023 11:42:06 GMT</pubDate>
  </item><item>
    <title>Type System</title>
    <link>https://notes.yxy.ninja/Software-Engineering/Managing-Complexity/Type-System</link>
    <guid>https://notes.yxy.ninja/Software-Engineering/Managing-Complexity/Type-System</guid>
    <description>#software_engineering#cs2030s What is it? A set of rules how variables, expressions &amp; functions interact with each other Covers Sub-types Compule-time Types Run-time Types Parameterized Types (Generics, Generic Types) Type Inference (ç±»åž‹æŽ¨æ–­) Custom Types .</description>
    <pubDate>Sun, 10 Dec 2023 11:39:00 GMT</pubDate>
  </item><item>
    <title>Type Inference (ç±»åž‹æŽ¨æ–­)</title>
    <link>https://notes.yxy.ninja/Software-Engineering/Terminologies/Type-Inference-(%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD)</link>
    <guid>https://notes.yxy.ninja/Software-Engineering/Terminologies/Type-Inference-(%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD)</guid>
    <description>Abstract Â§ Compiler or Interpreter automatically figure out the Datatype based on the context For example, in [Java, we can do List&lt;Integer&gt; intList = new ArrayList&lt;&gt;() instead of List&lt;Integer&gt; intList = new ArrayList&lt;Integer&gt;(), the Compiler is smart enough to figure out the Datatype for ArrayList based on the context provided by List&lt;Integer&gt; Reduce boilerplate code - more concise &amp; readable Too much may reduce the readability .</description>
    <pubDate>Sun, 10 Dec 2023 11:38:28 GMT</pubDate>
  </item><item>
    <title>Application Performance Monitoring (APM)</title>
    <link>https://notes.yxy.ninja/Software-Engineering/Monitoring/Application-Performance-Monitoring-(APM)</link>
    <guid>https://notes.yxy.ninja/Software-Engineering/Monitoring/Application-Performance-Monitoring-(APM)</guid>
    <description>Abstract Â§ Collect Trace from backend application code Deep visibility into applications with out-of-the-box performance dashboards for web services, queues, and databases to monitor requests, errors and latency .</description>
    <pubDate>Sun, 10 Dec 2023 11:33:22 GMT</pubDate>
  </item><item>
    <title>Trace</title>
    <link>https://notes.yxy.ninja/Software-Engineering/Monitoring/terminologies/Trace</link>
    <guid>https://notes.yxy.ninja/Software-Engineering/Monitoring/terminologies/Trace</guid>
    <description>Abstract Â§ An entity used to track time spent by an app processing a request &amp; the status of the request Made up one or more Span Identify the Span for Latency, then we can carry on with optimisation Terminologies Â§ Metrics Â§ Captures request counts, error counts, and latency measures of requests Runtime Metrics Â§ Allow to view Heap, non-heap memory usage and Garbage Collector activity of the app Datadog can have this enabled with export DD_RUNTIME_METRICS_ENABLED=true Instrumented Â§ Code or tools have been added to the application to monitor, measure, or analyze its behavior during execution Provide insights into the applicationâ€™s performance, functionality, and other operational characteristics This is particularly useful for debugging, performance tuning, and monitoring purposes Pipeline Â§ Datadog example Host-side Â§ We can tune the Sampling Library Sampling overrides Agent Sampling Trace Metrics are the Metrics, directly connected Instrumented application, calculated based on 100% of the appâ€™s traffic Datadog backend side Â§ Live Search allows us to search Span using any tag or Span Generate Custom Metric from Span Retention Filters - how long we want to retain the trace Dashboard used to give a visual representation of the app for optimisation and debugging .</description>
    <pubDate>Sun, 10 Dec 2023 11:30:34 GMT</pubDate>
  </item><item>
    <title>Real User Monitoring</title>
    <link>https://notes.yxy.ninja/Software-Engineering/Monitoring/Real-User-Monitoring</link>
    <guid>https://notes.yxy.ninja/Software-Engineering/Monitoring/Real-User-Monitoring</guid>
    <description>Abstract Â§ Used to monitor the frontend of an application .</description>
    <pubDate>Sun, 10 Dec 2023 11:28:51 GMT</pubDate>
  </item><item>
    <title>Datadog RUM</title>
    <link>https://notes.yxy.ninja/Tools/Datadog/Datadog-RUM</link>
    <guid>https://notes.yxy.ninja/Tools/Datadog/Datadog-RUM</guid>
    <description>Abstract Â§ Real User Monitoring Enable us to get the metadata about the client such as the user-agent, IP Address &amp; record down the user actions on the page in a video format Setup Â§ The example below is based on next.</description>
    <pubDate>Sun, 10 Dec 2023 11:27:38 GMT</pubDate>
  </item>
    </channel>
  </rss>