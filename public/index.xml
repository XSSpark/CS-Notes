<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>CS-Notes</title>
      <link>https://notes.yxy.ninja</link>
      <description>Last 10 notes on CS-Notes</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>MacOs Setup</title>
    <link>https://notes.yxy.ninja/MacOs-Setup</link>
    <guid>https://notes.yxy.ninja/MacOs-Setup</guid>
    <description>Abstract Â§ Note ðŸŒŸ denotes tools &amp; settings I must have in MacOS to have a smooth user/developer experience GUI Apps Â§ Install Firefox (Replaced with floorp) ðŸŒŸ Install Bypass Paywalls Install Dropbox Install Obsidian ðŸŒŸ Install Keypass (Replaced with Install StrongBox from App Store) ðŸŒŸ Install VSC ðŸŒŸ Add code into cli Install Termius ðŸŒŸ Modify Default Shell Install Tutanota ðŸŒŸ Install Notion ðŸŒŸ Install Docker (Replaced with OrbStack) ðŸŒŸ Install Podman Install Node Version Manager, npm included ðŸŒŸ Install Postman Install GitKraken ðŸŒŸ Install Brave Install MySQL Workbench Install Google Drive Client ðŸŒŸ Install Java JDK ðŸŒŸ Install IntelliJ Community ðŸŒŸ Install VirtualBox Install Ngrok # Move Ngrok Executable to PATH cp ngrok /Users/&lt;USERNAME&gt;/.</description>
    <pubDate>Sat, 09 Dec 2023 13:56:09 GMT</pubDate>
  </item><item>
    <title>4. Try describing 1 object 2 ways</title>
    <link>https://notes.yxy.ninja/Problem-solving/4.-Try-describing-1-object-2-ways</link>
    <guid>https://notes.yxy.ninja/Problem-solving/4.-Try-describing-1-object-2-ways</guid>
    <description>#problem_solving Note Basically explaining something in 2 different perspectives. For example, counting the possible permutation of a string of 5bits.</description>
    <pubDate>Sat, 09 Dec 2023 13:49:35 GMT</pubDate>
  </item><item>
    <title>2. Giving things (meaningful) names</title>
    <link>https://notes.yxy.ninja/Problem-solving/2.-Giving-things-(meaningful)-names</link>
    <guid>https://notes.yxy.ninja/Problem-solving/2.-Giving-things-(meaningful)-names</guid>
    <description>#problem_solving Give names to objects that describes its properties (Or to differentiate each one) It is like forming an abstraction over something, then we have more brain power to build on top of it Example 1: Approaching a problem related to Circle, Inscribed Angle Theorem.</description>
    <pubDate>Sat, 09 Dec 2023 13:48:46 GMT</pubDate>
  </item><item>
    <title>3. Leverage Symmetry</title>
    <link>https://notes.yxy.ninja/Problem-solving/3.-Leverage-Symmetry</link>
    <guid>https://notes.yxy.ninja/Problem-solving/3.-Leverage-Symmetry</guid>
    <description>#problem_solving Note Basically obtaining another piece of information based on reflection/symmetry, basically buy one get one free Example 1: Approaching a problem related to Circle, Inscribed Angle Theorem.</description>
    <pubDate>Sat, 09 Dec 2023 13:48:46 GMT</pubDate>
  </item><item>
    <title>1. Use the defining features of the set-up</title>
    <link>https://notes.yxy.ninja/Problem-solving/1.-Use-the-defining-features-of-the-set-up</link>
    <guid>https://notes.yxy.ninja/Problem-solving/1.-Use-the-defining-features-of-the-set-up</guid>
    <description>#problem_solving Note Look at what is given Ask the definition of each term How the ideas piece up together Example 1: Approaching a problem related to Circle, Inscribed Angle Theorem.</description>
    <pubDate>Sat, 09 Dec 2023 13:48:46 GMT</pubDate>
  </item><item>
    <title>MIPS R-Type Instruction</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/Instructions/R-Type/MIPS-R-Type-Instruction</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/Instructions/R-Type/MIPS-R-Type-Instruction</guid>
    <description>Abstract Â§ Opcode is always 000000 Operation is decided by the Function Code 6 parts - Opcode, Source Register, Target Register, Destination Register, Shift Amount &amp; Function Code Terminologies Â§ Function Code Â§ 6 bits Give MIPS (2^6-1) + 2^6 = 127 instead of 2^6=64 Instruction Dedicated for MIPS R-Type Instruction (if my understanding isnâ€™t wrong) Shift Amount Â§ 5bits Labeled as shamt .</description>
    <pubDate>Sat, 09 Dec 2023 13:46:03 GMT</pubDate>
  </item><item>
    <title>MIPS Instruction</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/MIPS-Instruction</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/MIPS-Instruction</guid>
    <description>Abstract Â§ The Instruction may specify 3 Registers - Destination Register, Source Register &amp; Target Register Terminologies Â§ Destination Register Â§ 5bits Labeled rd, mapped to WR Registers that gets the result of Operation in MIPS R-Type Instruction Instruction Source Register Â§ 5bits Labeled rs, mapped to RR1 Register with value stored that we want to use to carry out Operation Target Register Â§ 5 bits Labeled rt, mapped to RR2 Register with value stored we want to use in MIPS R-Type Instruction Instruction Register that gets the result of Operation in MIPS I-Type Instruction .</description>
    <pubDate>Sat, 09 Dec 2023 13:44:45 GMT</pubDate>
  </item><item>
    <title>MIPS J-Type Instruction</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/Instructions/MIPS-J-Type-Instruction</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/Instructions/MIPS-J-Type-Instruction</guid>
    <description>Abstract Â§ Instruction that tells CPU jump to Memory Address &amp; execute Instruction starting from that point 2 sections - Opcode, Memory Address .</description>
    <pubDate>Sat, 09 Dec 2023 13:39:21 GMT</pubDate>
  </item><item>
    <title>MIPS</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/MIPS</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/MIPS</guid>
    <description>#computer_organisation Note Load-Store, Register-Register ISA Use 32 Registers Uses Word Addressing, each Word 4 Byte Uses 32-bit Instruction First 6 bits refers to the Instruction 3 Types MIPS R-Type Instruction MIPS I-Type Instruction MIPS J-Type Instruction Example Assembly language implementation MIPS32 Assembly Language MIPS64 Assembly Language .</description>
    <pubDate>Sat, 09 Dec 2023 13:37:49 GMT</pubDate>
  </item><item>
    <title>srl (Shift Right Logical)</title>
    <link>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/Instructions/R-Type/srl-(Shift-Right-Logical)</link>
    <guid>https://notes.yxy.ninja/Computer-Organisation/Instruction-Set-Architecture-(ISA)/MIPS/Instructions/R-Type/srl-(Shift-Right-Logical)</guid>
    <description>#computer_organisation It effectively shifts the value right by n bits, discarding the lower n bits MIPS R-Type Instruction Can be perform on Registers regardless of the values it is holding (Memory Address &amp; values etc) Warning Source Register (rs, 5bits) is 0 Example srl $s0, $s0, 4 can be thought of as dividing the value in register $s0 by 16 (2^4) .</description>
    <pubDate>Sat, 09 Dec 2023 13:37:49 GMT</pubDate>
  </item>
    </channel>
  </rss>