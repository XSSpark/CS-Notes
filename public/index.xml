<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>CS-Notes</title>
      <link>https://notes.yxy.ninja</link>
      <description>Last 10 notes on CS-Notes</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Dynamic Array (List)</title>
    <link>https://notes.yxy.ninja/DSA/Data-Structure/Array/Dynamic-Array-(List)</link>
    <guid>https://notes.yxy.ninja/DSA/Data-Structure/Array/Dynamic-Array-(List)</guid>
    <description>Abstract § Resizable Array, achieved by building an Abstraction above the Array Benefits § Convenience § Developers don’t need to re-write the logic of re-sizeing Array etc Built with best practices &amp; battle-tested Cons § More Resource Intense § We can’t fine tune every Array operations because don’t have direct access .</description>
    <pubDate>Mon, 11 Dec 2023 12:59:23 GMT</pubDate>
  </item><item>
    <title>Queue (FIFO)</title>
    <link>https://notes.yxy.ninja/DSA/Data-Structure/Queue-(FIFO)</link>
    <guid>https://notes.yxy.ninja/DSA/Data-Structure/Queue-(FIFO)</guid>
    <description>Abstract § Linear Aka Array/Linked List with limitations Can be used in an online ordering system Complexity § Space § Time § O(1) to offer() - push in an element O(1) to poll() - pop out an element O(1) to peek() - read the element that is the first to be pop out Implementation § Implementation with Circular Array Visual push() at the rear index pop() &amp; peek() at the head index Implementation with Single Linked List Visual push() from tail node pop() &amp; peek() from the head node The difference in the 2 implementation is similar to Stack implementation comparison Variant § Monotonic Queue § Implemented with Deque, I am not sure if it can be implemented with Queue (FIFO) Example Sliding Window Maximum Finding the biggest element in a sliding window Questions § Leetcode Questions .</description>
    <pubDate>Mon, 11 Dec 2023 12:58:22 GMT</pubDate>
  </item><item>
    <title>Data Structure</title>
    <link>https://notes.yxy.ninja/DSA/Data-Structure/Data-Structure</link>
    <guid>https://notes.yxy.ninja/DSA/Data-Structure/Data-Structure</guid>
    <description>Abstract § The way Data is organised and structured We want it to save as much space as possible and be accessed as efficient as possible Physical § Continuous Memory § Elements are stored one next to another in theVirtual Memory Physical Memory § Elements are scattered around the Virtual Memory The exact location depends on OS’s Memory Management Logical § Linear § Each element has a predecessor and a successor, except for the first &amp; last element Elements stored in a straight line Example Array Linked List Stack (FILO) Queue (FIFO) Hash Map Non-linear § 2 types - Hierarchical Relationship(Tree) and Interconnected Relationship (Graph) Example Tree Heap Graph Hash Map .</description>
    <pubDate>Mon, 11 Dec 2023 12:51:17 GMT</pubDate>
  </item><item>
    <title>Deque</title>
    <link>https://notes.yxy.ninja/DSA/Data-Structure/Deque</link>
    <guid>https://notes.yxy.ninja/DSA/Data-Structure/Deque</guid>
    <description>#dsa Basics § Abstract Stack (FILO) &amp; Queue (FIFO) combined Linear Data Structure Aka Array/Linked List with limitations Warning %%&gt;[!example] Use as Online ordering system%% %%&gt;[!example] Use Cases%% Implementation § %%&gt;[!note] Implementation wit]] Visual push() at the rear index pop() &amp; peek() at the head index%% Implementation with Double Linked List Visual We need Double Linked List in order to have the ability to pollLast() - delete from the rear.</description>
    <pubDate>Mon, 11 Dec 2023 12:43:00 GMT</pubDate>
  </item><item>
    <title>ECS_Fargate_DataDog</title>
    <link>https://notes.yxy.ninja/ECS_Fargate_DataDog</link>
    <guid>https://notes.yxy.ninja/ECS_Fargate_DataDog</guid>
    <description>Project Title § Pushing ECS Fargate Logs directly into DataDog using Terraform Description § This will allow the intergration of ECS Logs to be pushed into DataDog directly.</description>
    <pubDate>Mon, 11 Dec 2023 09:19:09 GMT</pubDate>
  </item><item>
    <title>Datadog APM</title>
    <link>https://notes.yxy.ninja/Tools/Datadog/Datadog-APM</link>
    <guid>https://notes.yxy.ninja/Tools/Datadog/Datadog-APM</guid>
    <description>Abstract § Application Performance Monitoring (APM) Serverless Setup § The example below is based on ECS Fargate The entire setup is around Task Definition, we need to add in 3 parts into it - Pipe application log to AWS Firelens, AWS Firelens and Datadog Agent Sidecar Pipe application log to AWS Firelens § Add the following block inside the application container block Update the highlighted parts with your own values &quot;logConfiguration&quot;: { &quot;logDriver&quot;: &quot;awsfirelens&quot;, &quot;options&quot;: { &quot;Host&quot;: &quot;http-intake.</description>
    <pubDate>Mon, 11 Dec 2023 09:13:21 GMT</pubDate>
  </item><item>
    <title>ECS</title>
    <link>https://notes.yxy.ninja/Tools/AWS/Compute/ECS/ECS</link>
    <guid>https://notes.yxy.ninja/Tools/AWS/Compute/ECS/ECS</guid>
    <description>Abstract § A lightweight container orchestration service We can mount Volume to it for data that can be lost when Container is terminated Components § Container § We can obtain a shell into it using ECS Exec Obtain Private IP of the container, must have curl &amp;&amp; jq (JSON Processor) containerPrivateIP=$(curl $ECS_CONTAINER_METADATA_URI | jq -r &#039;.</description>
    <pubDate>Mon, 11 Dec 2023 07:08:41 GMT</pubDate>
  </item><item>
    <title>Application Performance Monitoring (APM)</title>
    <link>https://notes.yxy.ninja/Software-Engineering/Monitoring/Application-Performance-Monitoring-(APM)</link>
    <guid>https://notes.yxy.ninja/Software-Engineering/Monitoring/Application-Performance-Monitoring-(APM)</guid>
    <description>Abstract § Collect Trace from backend &amp; database for all the incoming API Requests Deep visibility into applications with out-of-the-box performance dashboards for web services, queues, and databases to monitor requests, errors and latency .</description>
    <pubDate>Mon, 11 Dec 2023 02:02:14 GMT</pubDate>
  </item><item>
    <title>Datadog RUM</title>
    <link>https://notes.yxy.ninja/Tools/Datadog/Datadog-RUM</link>
    <guid>https://notes.yxy.ninja/Tools/Datadog/Datadog-RUM</guid>
    <description>Abstract § Real User Monitoring Enable us to get the metadata about the client such as the user-agent, IP Address &amp; record down the user actions on the page in a video format Setup § The example below is based on next.</description>
    <pubDate>Mon, 11 Dec 2023 02:00:03 GMT</pubDate>
  </item><item>
    <title>Interrupts (中断)</title>
    <link>https://notes.yxy.ninja/OS/Main-Components/Process-Related/Interrupts-(%E4%B8%AD%E6%96%AD)/Interrupts-(%E4%B8%AD%E6%96%AD)</link>
    <guid>https://notes.yxy.ninja/OS/Main-Components/Process-Related/Interrupts-(%E4%B8%AD%E6%96%AD)/Interrupts-(%E4%B8%AD%E6%96%AD)</guid>
    <description>Abstract § When an interrupt occurs, Program Counter jumps to Interrupt Handler (Interrupt Service Routine, ISR) &amp; execute 2 forms - Signal (Software Interrupt) &amp; Hardware interrupts (外中断) Benefits § We don’t need to get CPU to keep Polling for response which may take a long time to produce.</description>
    <pubDate>Sun, 10 Dec 2023 15:51:21 GMT</pubDate>
  </item>
    </channel>
  </rss>